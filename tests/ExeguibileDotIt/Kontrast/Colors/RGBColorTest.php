<?php	

/**
 * This file has been generated by PhpUnitTestGenerator
 *
 * @copyright 2018 Stefano Bonvicini <stefano.bonvicini@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 */

namespace ExeguibileDotIt\Kontrast\Colors;
use \PHPUnit\Framework\TestCase;



class RGBColorTest extends TestCase
{

    /**
     * @var RGBColor instance of the class object
     */
    protected $object;

    /**
     * Sets up the fixture
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new RGBColor;
    }

    /**
     * Method r 
     * Gets or sets color R value
     *
     * @param int $v
     * 
     * @throws \InvalidArgumentException
     *
     * @return mixed self if used as a setter the value 
     * if used as getter
     */
    public function testR()
    {
        $this->object->r(33);

        $this->assertEquals(33, $this->object->r(), "Assigned R value does not correspond to returned one.");
    }

    /**
     * Method g 
     * Gets or sets color G value
     *
     * @param int $v
     * 
     * @throws \InvalidArgumentException
     *
     * @return mixed self if used as a setter the value 
     * if used as getter
     */
    public function testG()
    {
        $this->object->g(33);

        $this->assertEquals(33, $this->object->g(), "Assigned G value does not correspond to returned one.");

    }

    /**
     * Method b 
     * Gets or sets color B value
     *
     * @param int $v
     * 
     * @throws \InvalidArgumentException
     *
     * @return mixed self if used as a setter the value 
     * if used as getter
     */
    public function testB()
    {
        $this->object->g(33);

        $this->assertEquals(33, $this->object->g(), "Assigned B value does not correspond to returned one.");
    }

    /**
     * Method isValidRGBInt.
     *
     * @param int $n
     * 
     * @return bool
     */
    public function testIsValidRGBInt()
    {
        $this->assertTrue(RGBColor::isValidRGBInt(0), "Zero is not recognized as a valid RGB Int");

        $this->assertTrue(RGBColor::isValidRGBInt(255), "255 is not recognized as a valid RGB Int");

        $this->assertFalse(RGBColor::isValidRGBInt(5.3), "5.3 is not recognized as a valid RGB Int");
        
        $this->assertFalse(RGBColor::isValidRGBInt(-5), "-5 is recognized as a valid RGB Int");
        
        $this->assertFalse(RGBColor::isValidRGBInt(500), "500 is recognized as a valid RGB Int");

    }

    /**
     * Method __clone.
     * 
     * @return 
     */
    public function testObjectClone()
    {
    
        $this->object->r(33)->g(255)->b(3);

        $cloned = clone $this->object;

        $this->assertInstanceOf(RGBColor::class, $cloned);

        $this->assertNull($cloned->r());
        
        $this->assertNull($cloned->g());
        
        $this->assertNull($cloned->b());

    }

    /**
     * Method setUndefined.
     *
     * @return self
     */
    public function testSetUndefined()
    {

        $this->object->r(33)->g(255)->b(3);

        $this->assertFalse($this->object->isUndefined());

        $this->assertTrue($this->object->setUndefined()->isUndefined());

    }


    /**
     * @depends testSetUndefined
     */
    public function testIsUndefined()
    {
        $this->assertTrue($this->object->isUndefined());

        $this->object->r(55);

        $this->assertTrue($this->object->isUndefined());

        $this->object->g(55);

        $this->assertTrue($this->object->isUndefined());

        $this->object->b(55);

        $this->assertFalse($this->object->isUndefined());

    }


}



