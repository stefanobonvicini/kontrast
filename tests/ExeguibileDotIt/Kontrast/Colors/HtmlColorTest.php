<?php	

/**
 * This file has been generated by PhpUnitTestGenerator
 *
 * @copyright 2018 Stefano Bonvicini <stefano.bonvicini@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 */

namespace ExeguibileDotIt\Kontrast\Colors;
use \PHPUnit\Framework\TestCase;



class HtmlColorTest extends TestCase
{

    /**
     * @var HtmlColor instance of the class object
     */
    protected $object;

    /**
     * Sets up the fixture
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HtmlColor;
    }

    /**
     * Method hexadecimal.
     *
     * @param string $v
     * 
     * @throws \InvalidArgumentException
     *
     * @return mixed self in setter mode hexadecimal string in getter mode
     * without #
     */
    public function testHexadecimal()
    {
        
        $this->assertEquals('44feb4', $this->object->hexadecimal('#44feb4')->hexadecimal());

    }


    public function testHexadecimalDoesNotDependOnHashTag()
    {
        $v = $this->object->hexadecimal('#44feb4')->hexadecimal();
        
        $w = $this->object->hexadecimal('44feb4')->hexadecimal();

        $this->assertEquals($v, $w);

    }


    public function testIsValidHexadecimalColor()
    {

        $this->assertTrue(HtmlColor::isValidHexadecimalColor('aa3a5b'), "aa3a5b is not recognized as a valid hexadecimal");
        
        $this->assertTrue(HtmlColor::isValidHexadecimalColor('#aa3a5b'), "#aa3a5b is not recognized as a valid hexadecimal");
        
        $this->assertFalse(HtmlColor::isValidHexadecimalColor('#xa3a5b'), "#xa3a5b is recognized as a valid hexadecimal");
        
        $this->assertFalse(HtmlColor::isValidHexadecimalColor('#xa3a5bx'), "#xa3a5bx is recognized as a valid hexadecimal");

    }

    /**
     * Method __clone.
     * 
     * @return 
     */
    public function testObjectClone()
    {
        $this->object->hexadecimal('ffaa33');

        $cloned = clone $this->object;

        $this->assertInstanceOf(HtmlColor::class, $cloned);

        $this->assertNull($cloned->hexadecimal());
        
    }

    /**
     * Method setUndefined
     *
     * @depends testIsUndefined
     *
     * @return self
     */
    public function testSetUndefined()
    {
        $this->object->hexadecimal("ffaabb");

        $this->assertFalse($this->object->isUndefined());

        $this->assertTrue($this->object->setUndefined()->isUndefined());
    }


    public function testIsUndefined()
    {
        $this->assertTrue($this->object->isUndefined());

        $this->object->hexadecimal('111111');

        $this->assertFalse($this->object->isUndefined());
    }


    public function testToString()
    {

        $string = "#ffaa33";

        $this->object->hexadecimal($string);

        $this->expectOutputString($string);

        echo $this->object;

    }


}



